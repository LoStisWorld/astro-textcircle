---
interface Props {
	class?: string;
	text: string;
	options?: {
		spacing?: number;
		textTransform?: 'uppercase' | 'lowercase' | 'none';
		fontSizeInRem?: number;
		fontWeight?: 'lighter' | 'normal' | 'bold' | 'bolder' | number;
		divider?: string;
		dividerColor?: string;
		rotate?: number;
	};
	animation?: {
		duration: string;
		timing?: 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear' | string;
		delay?: string;
		direction?: 'normal' | 'reverse';
		count?: 'infinite' | number;
		animateOnHover?: boolean;
		stopAnimateOnHover?: boolean;
	};
}

// Default props
const { class: classes, text, options, animation } = Astro.props as Props;

// Destructor options props
const {
	spacing = 1,
	textTransform: tt,
	fontSizeInRem: fsir = 1,
	fontWeight: fw = 'normal',
	divider = '',
	dividerColor = '',
	rotate,
} = options || {};

// Destructor animation props
const {
	duration,
	timing = 'linear',
	delay = '0s',
	direction = 'normal',
	count = 'infinite',
	animateOnHover = false,
	stopAnimateOnHover = false,
} = animation || {};

// Make array from text
const textArray = [' ', ...text];

// Calculate circle container styling
function calcCircleStyle(): string {
	const circleSize = `${Math.floor(1.8 *(spacing / Math.sin(360 / textArray.length / (180 / Math.PI))) * fsir)}rem`;
	const circleAnimation = `animation:${direction === 'normal' ? 'circleSpin' : 'circleSpinReverse'} ${duration} ${timing} ${delay} ${count} ${animateOnHover ? 'paused' : ''}`;

	let circleStyling: string = `height:${circleSize};width:${circleSize};`;

	// Check animation props
	if (duration) {
		circleStyling += `${circleAnimation.trim()};`;
	} 
	if (rotate && !duration) {
		circleStyling += `transform:rotate(${rotate}deg);`;
	}

	return circleStyling;
}

// Calculate circle styling
function calcCircleItemStyle(index: number): string {
	const radius = `${(spacing / Math.sin(360 / textArray.length / (180 / Math.PI))) * -1}ch`;
	const angle = (360 / textArray.length) * 1;
	let itemStyling = `transform:translate(-50%, -50%) rotate(${angle * index}deg) translateY(${radius});font-size:${fsir}rem;font-weight:${fw};`;

	if (tt) itemStyling += `text-transform:${tt}`;
	return itemStyling;
}
---

<div
	class:list={['lw-textcircle', classes]}
	data-circle-animate-hover={animateOnHover ?? null}
	data-circle-stop-animate-hover={stopAnimateOnHover && !animateOnHover ? true : null}
	aria-label={text}
>
	<p
		style={calcCircleStyle()}
		aria-hidden="true"
	>
		{
			textArray.map((char, i) => (
				<span
					style={`${calcCircleItemStyle(i)};${
						divider && dividerColor && char.trim() === ''
							? `color:${dividerColor};`
							: ''
					}`}
					set:html={
						char.trim() !== ''
							? char
							: char.trim() === '' && !divider
							? '&nbsp;'
							: divider
					}
				/>
			))
		}
	</p>
</div>

<style is:global>
	.lw-textcircle {
		overflow: hidden;
	}
	.lw-textcircle > p {
		position: relative;
		margin: 0;
	}
	.lw-textcircle > p > span {
		position: absolute;
		top: 50%;
		left: 50%;
	}
	.lw-textcircle[data-circle-animate-hover]:hover > p {
		-webkit-animation-play-state: running !important;
		animation-play-state: running !important;
	}

	.lw-textcircle[data-circle-stop-animate-hover]:hover > p {
		-webkit-animation-play-state: paused !important;
		animation-play-state: paused !important;
	}

	@media (prefers-reduced-motion: no-preference) {
		@-webkit-keyframes circleSpin {
			to {
				-webkit-transform: rotate3D(0, 0, 1, -360deg);
				transform: rotate3D(0, 0, 1, -360deg);
			}
		}
		@keyframes circleSpin {
			to {
				-webkit-transform: rotate3D(0, 0, 1, -360deg);
				transform: rotate3D(0, 0, 1, -360deg);
			}
		}
		@-webkit-keyframes circleSpinReverse {
			to {
				-webkit-transform: rotate3D(0, 0, 1, 360deg);
				transform: rotate3D(0, 0, 1, 360deg);
			}
		}
		@keyframes circleSpinReverse {
			to {
				-webkit-transform: rotate3D(0, 0, 1, 360deg);
				transform: rotate3D(0, 0, 1, 360deg);
			}
		}
	}
</style>
